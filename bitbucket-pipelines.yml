image: node:12.13.0
clone:
  depth: full

definitions:
  steps:
    # Scan code and generate SonarCloud report.
    # SonarCould qality gate code. Pipeline will fail if quality gate does not pass.
    - step: &check-sonarcloud
        name: SonarCloud Quality Gate
        caches:
          - node
        script:
          - npm install
          - npm run eslint
          - pipe: sonarsource/sonarcloud-scan:1.0.1
          - pipe: sonarsource/sonarcloud-quality-gate:0.1.3
    # Build application with Webpack and prepare build artifact
    - step: &webpack-build
        name: Webpack Build
        caches:
          - node
        script:
          - npm install
          - npx webpack --env.SENTRY_URL=$SENTRY_URL_REACT --env.SENTRY_RELEASE=build-$BITBUCKET_BUILD_NUMBER --config webpack.config.prod.js
        artifacts:
          - build/**
          - sourcemaps/**
    # Setup Sentry.io release commit associations and sourcemaps
    # Releases for frontend and backend projects
    - step: &sentry-release-all
        name: Sentry Release Config
        image: getsentry/sentry-cli:latest
        script:
          - sentry-cli --auth-token $SENTRY_AUTH_TOKEN releases -o "app" new "build-$BITBUCKET_BUILD_NUMBER" -p "backend" -p "frontend"
          - sentry-cli --auth-token $SENTRY_AUTH_TOKEN releases -o "app" set-commits "build-$BITBUCKET_BUILD_NUMBER" --auto
          - export SENTRY_PROJECT=frontend
          - sentry-cli --auth-token $SENTRY_AUTH_TOKEN releases -o "app" files "build-$BITBUCKET_BUILD_NUMBER" upload-sourcemaps sourcemaps/ --rewrite
    # Create deployment artifact, upload to S3, and execute CodeDeploy deployment
    # Deploy Sentry.io release
    # NOTE: Specifically for dev deployments
    - step: &aws-codedeploy-dev
        name: AWS CodeDeploy Procedure
        trigger: manual
        script:
          # Finalize sentry release
          - curl -sL https://sentry.io/get-cli/ | bash
          - sentry-cli --auth-token $SENTRY_AUTH_TOKEN releases -o "app" finalize "build-$BITBUCKET_BUILD_NUMBER"
          # Node environment variables
          - echo "NODE_ENV=production" >> .env
          # Express environment variables
          - echo "EXPRESS_PORT=5000" >> .env
          - echo "EXPRESS_SESSION_SECRET=$EXPRESS_SESSION_SECRET" >> .env
          # Mongoose environment variables
          - echo "MONGOOSE_URI=$MONGOOSE_URI" >> .env
          # Loggly environment variables
          - echo "LOGGLY_TOKEN=$LOGGLY_TOKEN" >> .env
          - echo "LOGGLY_TAG=node_build-$BITBUCKET_BUILD_NUMBER" >> .env
          # Sentry environment variables
          - echo "SENTRY_URL=$SENTRY_URL_NODE" >> .env
          - echo "SENTRY_RELEASE=build-$BITBUCKET_BUILD_NUMBER" >> .env
          - echo "SENTRY_ENV=branch-$BITBUCKET_BRANCH" >> .env
          # Build artifact .zip
          - mv aws/dev/appspec.yml appspec.yml
          - apt-get update && apt-get install -y zip
          - zip -r bw-app.zip build .env package.json appspec.yml aws/dev src_server
          - pipe: atlassian/aws-code-deploy:0.2.9
            variables:
              AWS_DEFAULT_REGION: $AWS_REGION
              AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
              AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY
              COMMAND: 'upload'
              APPLICATION_NAME: 'bw-app'
              ZIP_FILE: 'bw-app.zip'
              S3_BUCKET: $AWS_S3_BUCKET
          - pipe: atlassian/aws-code-deploy:0.2.9
            variables:
              AWS_DEFAULT_REGION: $AWS_REGION
              AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
              AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY
              COMMAND: 'deploy'
              APPLICATION_NAME: 'bw-app'
              DEPLOYMENT_GROUP: $AWS_DEPLOYMENT_GROUP
              WAIT: 'true'
              S3_BUCKET: $AWS_S3_BUCKET
    - step: &deploy-staging
        name: AWS Deploy to Staging
        trigger: manual
        script:
          - mkdir application
          # Build .env file
          - echo "LOGGLY_TAG=node_build-$BITBUCKET_BUILD_NUMBER" >> application/.env
          - echo "SENTRY_RELEASE=build-$BITBUCKET_BUILD_NUMBER" >> .env
          - echo "SENTRY_ENV=branch-$BITBUCKET_BRANCH" >> .env
          # Build deployment artifact
          - mv package.json application/
          - mv build/ application/www
          - mv -v src_server/* application/
          - cd application
          - apt-get update && apt-get install -y zip
          - zip -r ../application.zip *
          - cd ..
          # Upload artifact to S3
          - pipe: atlassian/aws-elasticbeanstalk-deploy:0.5.2
            variables:
              AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
              AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY
              AWS_DEFAULT_REGION: $AWS_DEFAULT_REGION
              APPLICATION_NAME: 'bw-app'
              COMMAND: 'upload-only'
              ZIP_FILE: 'application.zip'
              VERSION_LABEL: 'deploy-$BITBUCKET_BUILD_NUMBER-multiple'

pipelines:
  # Pipelines that are triggered manually
  custom:
    build:
      - step: *webpack-build
    sonar:
      - step: *check-sonarcloud
    codedeploy-dev-1:
      - step: *webpack-build
      - step: *check-sonarcloud
      - step: *sentry-release-all
      - step:
          <<: *aws-codedeploy-dev
          name: AWS CodeDeploy [dev-1]
          deployment: dev-1
          trigger: automatic

  # Automatic pipelines for branches which don't have defined pipelines
  default:
    - step: *webpack-build
    - step:
        <<: *check-sonarcloud
        trigger: manual

  # Automatic pipelines for branches
  branches:
    master:
      - step: *webpack-build
      #- step: *check-sonarcloud
      #- step: *sentry-release-all
      - step:
          <<: *deploy-staging
          deployment: staging

  # Automatic pipelines for all pull-requests
  pull-requests:
    '**':
      - step: *webpack-build
      - step: *check-sonarcloud
